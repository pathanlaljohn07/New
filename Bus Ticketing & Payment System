import React, { useState, useEffect, createContext, useContext } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import {
    getFirestore,
    doc,
    addDoc,
    setDoc,
    updateDoc,
    deleteDoc,
    onSnapshot,
    collection,
    query,
    where,
    getDoc, // Used to get a single document
    getDocs, // Used for checking if a collection is empty
    serverTimestamp // Import serverTimestamp
} from 'firebase/firestore';

// --- Firebase Context and Initialization ---
// Provides Firebase instances and auth state to all components
const FirebaseContext = createContext(null);

const FirebaseProvider = ({ children }) => {
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);

    useEffect(() => {
        try {
            // Retrieve Firebase config from global __firebase_config
            const firebaseConfig = typeof __firebase_config !== 'undefined'
                ? JSON.parse(__firebase_config)
                : {}; // Fallback for local testing

            if (!firebaseConfig || Object.keys(firebaseConfig).length === 0) {
                console.error("Firebase config is missing. Please ensure __firebase_config is set.");
                return;
            }

            const app = initializeApp(firebaseConfig);
            const firestore = getFirestore(app);
            const firebaseAuth = getAuth(app);

            setDb(firestore);
            setAuth(firebaseAuth);

            // Listen for authentication state changes
            const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
                if (user) {
                    // User is signed in, set their UID
                    setUserId(user.uid);
                } else {
                    // No user is signed in, attempt anonymous sign-in or use custom token
                    try {
                        const initialAuthToken = typeof __initial_auth_token !== 'undefined'
                            ? __initial_auth_token
                            : null;

                        if (initialAuthToken) {
                            // Sign in with custom token if available
                            await signInWithCustomToken(firebaseAuth, initialAuthToken);
                        } else {
                            // Otherwise, sign in anonymously
                            await signInAnonymously(firebaseAuth);
                        }
                    } catch (signInError) {
                        console.error("Error signing in:", signInError);
                        // Fallback to a random ID if anonymous sign-in also fails (highly unlikely)
                        setUserId(crypto.randomUUID());
                    }
                }
                // Mark authentication as ready
                setIsAuthReady(true);
            });

            // Cleanup the auth state listener when the component unmounts
            return () => unsubscribe();
        } catch (error) {
            console.error("Failed to initialize Firebase:", error);
        }
    }, []); // Empty dependency array ensures this runs only once on mount

    return (
        <FirebaseContext.Provider value={{ db, auth, userId, isAuthReady }}>
            {children}
        </FirebaseContext.Provider>
    );
};

// --- Helper Hook for Firebase Context ---
// Custom hook to easily access Firebase context values
const useFirebase = () => {
    const context = useContext(FirebaseContext);
    if (!context) {
        throw new Error('useFirebase must be used within a FirebaseProvider');
    }
    return context;
};

// --- Common UI Components ---
// A loading spinner component
const LoadingSpinner = () => (
    <div className="flex justify-center items-center h-full min-h-[100px]">
        <svg className="animate-spin h-8 w-8 text-blue-500" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span className="ml-2 text-gray-700">Loading...</span>
    </div>
);

// An error message display component
const ErrorMessage = ({ message }) => (
    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
        <strong className="font-bold">Error:</strong>
        <span className="block sm:inline ml-2">{message}</span>
    </div>
);

// --- Header Component ---
const Header = ({ currentPage, setCurrentPage }) => {
    const { userId } = useFirebase(); // Get userId from context

    return (
        <header className="bg-gradient-to-r from-purple-700 to-indigo-800 text-white p-4 shadow-lg rounded-b-xl">
            <div className="container mx-auto flex flex-col sm:flex-row justify-between items-center">
                <h1 className="text-3xl font-extrabold mb-2 sm:mb-0">Bus Tickets</h1>
                <nav>
                    <ul className="flex flex-wrap justify-center space-x-4">
                        <li>
                            <button
                                onClick={() => setCurrentPage('bookTickets')}
                                className={`px-4 py-2 rounded-full transition duration-300 ease-in-out
                                    ${currentPage === 'bookTickets' ? 'bg-purple-800 shadow-md' : 'hover:bg-purple-600'}`}
                            >
                                Book Tickets
                            </button>
                        </li>
                        <li>
                            <button
                                onClick={() => setCurrentPage('myBookings')}
                                className={`px-4 py-2 rounded-full transition duration-300 ease-in-out
                                    ${currentPage === 'myBookings' ? 'bg-purple-800 shadow-md' : 'hover:bg-purple-600'}`}
                            >
                                My Bookings
                            </button>
                        </li>
                    </ul>
                </nav>
                {userId && (
                    <div className="mt-2 sm:mt-0 text-sm bg-purple-600 px-3 py-1 rounded-full shadow-inner">
                        Your Session ID: <span className="font-mono">{userId.substring(0, 8)}...</span>
                    </div>
                )}
            </div>
        </header>
    );
};

// --- Route Management Component (for Admin/Initial Setup) ---
const RouteManager = ({ routes, setRoutes }) => {
    const { db, isAuthReady } = useFirebase();
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Get the base app ID from the global variable
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const routesCollectionPath = `artifacts/${appId}/public/data/routes`;

    // Fetch routes on component mount and whenever Firebase is ready
    useEffect(() => {
        if (!isAuthReady || !db) return;

        setLoading(true);
        setError(null);

        const routesCollectionRef = collection(db, routesCollectionPath);
        const unsubscribe = onSnapshot(routesCollectionRef, (snapshot) => {
            const fetchedRoutes = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            // Sort routes by departure location then destination
            fetchedRoutes.sort((a, b) => {
                const depCompare = a.departure.localeCompare(b.departure);
                if (depCompare !== 0) return depCompare;
                return a.destination.localeCompare(b.destination);
            });
            setRoutes(fetchedRoutes);
            setLoading(false);
        }, (err) => {
            console.error("Error fetching routes:", err);
            setError("Failed to load routes. Please try again.");
            setLoading(false);
        });

        // Cleanup listener on component unmount
        return () => unsubscribe();
    }, [db, isAuthReady, appId, setRoutes]);

    // Add initial sample routes if the collection is empty
    const addSampleRoutes = async () => {
        if (!db) return;
        setLoading(true);
        try {
            const routesCollectionRef = collection(db, routesCollectionPath);
            const existingDocs = await getDocs(routesCollectionRef);
            if (existingDocs.empty) {
                const sampleRoutes = [
                    { departure: "New York", destination: "Boston", price: 35.00, totalSeats: 50, availableSeats: 50, time: "08:00 AM" },
                    { departure: "New York", destination: "Philadelphia", price: 25.00, totalSeats: 40, availableSeats: 40, time: "10:30 AM" },
                    { departure: "Boston", destination: "New York", price: 35.00, totalSeats: 50, availableSeats: 50, time: "09:00 AM" },
                    { departure: "Los Angeles", destination: "San Francisco", price: 45.00, totalSeats: 60, availableSeats: 60, time: "11:00 AM" },
                    { departure: "Chicago", destination: "Detroit", price: 30.00, totalSeats: 45, availableSeats: 45, time: "07:45 AM" },
                ];
                for (const route of sampleRoutes) {
                    await addDoc(routesCollectionRef, route);
                }
                console.log("Sample routes added to Firestore.");
            } else {
                console.log("Routes collection is not empty. Skipping sample data addition.");
            }
        } catch (err) {
            console.error("Error adding sample routes:", err);
            setError("Failed to add sample routes.");
        } finally {
            setLoading(false);
        }
    };

    if (loading) return <LoadingSpinner />;
    if (error) return <ErrorMessage message={error} />;

    return (
        <div className="bg-white p-6 rounded-lg shadow-lg mb-8">
            <h2 className="text-2xl font-bold text-gray-800 mb-4 border-b pb-2">Available Routes</h2>
            {routes.length === 0 ? (
                <div className="text-center text-gray-600 py-4">
                    <p className="mb-2">No routes available yet.</p>
                    <button
                        onClick={addSampleRoutes}
                        className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300"
                    >
                        Add Sample Routes
                    </button>
                </div>
            ) : (
                <div className="overflow-x-auto">
                    <table className="min-w-full bg-white rounded-lg shadow-md">
                        <thead className="bg-gray-100 border-b border-gray-200">
                            <tr>
                                <th className="py-3 px-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider rounded-tl-lg">Departure</th>
                                <th className="py-3 px-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Destination</th>
                                <th className="py-3 px-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Time</th>
                                <th className="py-3 px-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Price</th>
                                <th className="py-3 px-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider rounded-tr-lg">Available / Total Seats</th>
                            </tr>
                        </thead>
                        <tbody>
                            {routes.map((route) => (
                                <tr key={route.id} className="border-b border-gray-100 last:border-b-0 hover:bg-gray-50">
                                    <td className="py-3 px-4 text-gray-800 font-medium">{route.departure}</td>
                                    <td className="py-3 px-4 text-gray-700">{route.destination}</td>
                                    <td className="py-3 px-4 text-gray-700">{route.time}</td>
                                    <td className="py-3 px-4 text-green-600 font-bold">${route.price ? route.price.toFixed(2) : 'N/A'}</td>
                                    <td className="py-3 px-4 text-gray-700">{route.availableSeats} / {route.totalSeats}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}
        </div>
    );
};

// --- Booking Form Component ---
const BookingForm = ({ routes }) => {
    const { db, userId, isAuthReady } = useFirebase();
    const [selectedRouteId, setSelectedRouteId] = useState('');
    const [numberOfTickets, setNumberOfTickets] = useState(1);
    const [bookingDate, setBookingDate] = useState(new Date().toISOString().split('T')[0]); // YYYY-MM-DD
    const [message, setMessage] = useState('');
    const [loading, setLoading] = useState(false);

    // Get the base app ID from the global variable
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const routesCollectionPath = `artifacts/${appId}/public/data/routes`;
    const bookingsCollectionPath = `artifacts/${appId}/users/${userId}/bookings`;


    // Reset message after a few seconds
    useEffect(() => {
        if (message) {
            const timer = setTimeout(() => setMessage(''), 5000);
            return () => clearTimeout(timer);
        }
    }, [message]);

    // Calculate total price
    const selectedRoute = routes.find(r => r.id === selectedRouteId);
    const totalPrice = selectedRoute ? (selectedRoute.price * numberOfTickets).toFixed(2) : '0.00';

    const handleBooking = async () => {
        if (!db || !userId || !selectedRouteId || numberOfTickets < 1 || !bookingDate) {
            setMessage("Please select a route, number of tickets, and date.");
            return;
        }

        setLoading(true);
        setMessage('');

        try {
            const routeDocRef = doc(db, routesCollectionPath, selectedRouteId);
            const routeSnap = await getDoc(routeDocRef);

            if (!routeSnap.exists()) {
                setMessage("Selected route not found.");
                setLoading(false);
                return;
            }

            const currentRoute = { id: routeSnap.id, ...routeSnap.data() };

            if (currentRoute.availableSeats < numberOfTickets) {
                setMessage(`Not enough seats available. Only ${currentRoute.availableSeats} seats left.`);
                setLoading(false);
                return;
            }

            // Simulate Payment (Backend integration would be here)
            // In a real application, you'd send payment details to your server,
            // which would then interact with Stripe/PayPal.
            // For this simulation, we proceed as if payment is successful.
            setLoading(false); // End loading for UI feedback before final update
            setMessage("Simulating payment... (This is not a real payment)");
            await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay for payment

            // Update available seats in the routes collection
            const newAvailableSeats = currentRoute.availableSeats - numberOfTickets;
            await updateDoc(routeDocRef, { availableSeats: newAvailableSeats });

            // Record the booking in the user's private collection
            const bookingsRef = collection(db, bookingsCollectionPath);
            await addDoc(bookingsRef, {
                routeId: selectedRouteId,
                departure: currentRoute.departure,
                destination: currentRoute.destination,
                time: currentRoute.time,
                date: bookingDate,
                numberOfTickets: numberOfTickets,
                totalPrice: parseFloat(totalPrice),
                status: 'Confirmed', // Or 'Pending' if real payment was involved
                timestamp: serverTimestamp() // Use serverTimestamp for consistent ordering
            });

            setMessage(`Booking confirmed for ${numberOfTickets} ticket(s) on ${currentRoute.departure} to ${currentRoute.destination} on ${bookingDate}. Total: $${totalPrice}`);
            setSelectedRouteId('');
            setNumberOfTickets(1);
        } catch (err) {
            console.error("Error during booking:", err);
            setMessage(`Booking failed: ${err.message || "An unexpected error occurred."}`);
        } finally {
            setLoading(false);
        }
    };

    if (!isAuthReady) return <LoadingSpinner />;
    if (routes.length === 0) {
        return (
            <div className="bg-white p-6 rounded-lg shadow-lg my-8 text-center text-gray-700">
                <p className="mb-4">No routes available to book tickets for.</p>
                <p>Please ensure sample routes are added.</p>
            </div>
        );
    }

    return (
        <div className="bg-white p-6 rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold text-gray-800 mb-4 border-b pb-2">Book Your Tickets</h2>

            {message && (
                <div className={`mb-4 p-3 rounded-md ${message.includes('failed') ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>
                    {message}
                </div>
            )}

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div>
                    <label htmlFor="route-select" className="block text-gray-700 text-sm font-bold mb-2">Select Route:</label>
                    <select
                        id="route-select"
                        className="shadow border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-purple-400"
                        value={selectedRouteId}
                        onChange={(e) => setSelectedRouteId(e.target.value)}
                        disabled={loading}
                    >
                        <option value="">-- Choose a route --</option>
                        {routes.map((route) => (
                            <option key={route.id} value={route.id}>
                                {route.departure} to {route.destination} ({route.time}) - ${route.price?.toFixed(2)}
                            </option>
                        ))}
                    </select>
                </div>

                <div>
                    <label htmlFor="num-tickets" className="block text-gray-700 text-sm font-bold mb-2">Number of Tickets:</label>
                    <input
                        type="number"
                        id="num-tickets"
                        className="shadow border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-purple-400"
                        min="1"
                        value={numberOfTickets}
                        onChange={(e) => setNumberOfTickets(parseInt(e.target.value) || 1)}
                        disabled={loading}
                    />
                </div>

                <div className="md:col-span-2">
                    <label htmlFor="booking-date" className="block text-gray-700 text-sm font-bold mb-2">Date of Travel:</label>
                    <input
                        type="date"
                        id="booking-date"
                        className="shadow border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-purple-400"
                        value={bookingDate}
                        onChange={(e) => setBookingDate(e.target.value)}
                        disabled={loading}
                    />
                </div>
            </div>

            <div className="mt-6 p-4 bg-gray-50 rounded-md border border-gray-200">
                <p className="text-xl font-bold text-gray-800">Total Price: <span className="text-purple-600">${totalPrice}</span></p>
            </div>

            <button
                onClick={handleBooking}
                className="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-4 rounded-md shadow-lg transition duration-300 transform hover:scale-105 mt-6"
                disabled={loading || !selectedRouteId || numberOfTickets < 1 || !bookingDate}
            >
                {loading ? <LoadingSpinner /> : 'Simulate Payment & Book Now'}
            </button>

            <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mt-6 rounded-lg" role="alert">
                <p className="font-bold">Payment Gateway Disclaimer:</p>
                <p className="text-sm">
                    This is a **simulated payment process** for demonstration purposes. A real-world application requires integration with a secure payment gateway (e.g., Stripe, PayPal) and **server-side logic** to handle sensitive payment information securely. Never handle real payment details directly in client-side code.
                </p>
            </div>
        </div>
    );
};

// --- My Bookings Component ---
const MyBookings = () => {
    const { db, userId, isAuthReady } = useFirebase();
    const [bookings, setBookings] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Get the base app ID from the global variable
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const bookingsCollectionPath = `artifacts/${appId}/users/${userId}/bookings`;

    useEffect(() => {
        if (!isAuthReady || !db || !userId) return;

        setLoading(true);
        setError(null);

        const bookingsCollectionRef = collection(db, bookingsCollectionPath);
        // We will fetch all and sort in memory, as complex queries can require indexes
        const q = query(bookingsCollectionRef);

        const unsubscribe = onSnapshot(q, (snapshot) => {
            const fetchedBookings = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            // Sort bookings by timestamp (most recent first)
            fetchedBookings.sort((a, b) => (b.timestamp?.toMillis() || 0) - (a.timestamp?.toMillis() || 0));
            setBookings(fetchedBookings);
            setLoading(false);
        }, (err) => {
            console.error("Error fetching bookings:", err);
            setError("Failed to load your bookings. Please try again.");
            setLoading(false);
        });

        // Cleanup listener on component unmount
        return () => unsubscribe();
    }, [db, userId, isAuthReady, appId]);

    if (loading) return <LoadingSpinner />;
    if (error) return <ErrorMessage message={error} />;

    return (
        <div className="bg-white p-6 rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold text-gray-800 mb-4 border-b pb-2">My Bookings</h2>

            {bookings.length === 0 ? (
                <div className="text-center text-gray-600 p-8">
                    <p className="mb-4">You haven't made any bookings yet.</p>
                </div>
            ) : (
                <div className="space-y-6">
                    {bookings.map((booking) => (
                        <div key={booking.id} className="bg-gray-50 p-6 rounded-lg shadow-md border border-gray-200">
                            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 pb-2 border-b border-gray-200">
                                <h3 className="font-semibold text-xl text-gray-800 mb-2 sm:mb-0">
                                    {booking.departure} to {booking.destination}
                                </h3>
                                <span className="text-gray-600 text-sm">
                                    {booking.timestamp ? new Date(booking.timestamp.toMillis()).toLocaleString() : 'N/A'}
                                </span>
                            </div>
                            <div className="grid grid-cols-2 gap-y-2 text-gray-700 mb-4">
                                <div><span className="font-medium">Date:</span> {booking.date}</div>
                                <div><span className="font-medium">Time:</span> {booking.time}</div>
                                <div><span className="font-medium">Tickets:</span> {booking.numberOfTickets}</div>
                                <div><span className="font-medium">Status:</span>
                                    <span className={`ml-2 px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${booking.status === 'Confirmed' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'}`}>
                                        {booking.status}
                                    </span>
                                </div>
                            </div>
                            <div className="pt-3 border-t border-gray-200 flex justify-between items-center">
                                <span className="font-bold text-lg text-gray-800">Total Paid:</span>
                                <span className="font-extrabold text-xl text-purple-600">${booking.totalPrice.toFixed(2)}</span>
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
};


// --- Main App Component ---
const App = () => {
    // State to manage the current page being displayed
    const [currentPage, setCurrentPage] = useState('bookTickets'); // 'bookTickets' or 'myBookings'
    // State to store the list of available bus routes
    const [routes, setRoutes] = useState([]);

    return (
        // FirebaseProvider wraps the entire application to provide Firebase context
        <FirebaseProvider>
            <div className="min-h-screen bg-gray-50 font-inter antialiased text-gray-800">
                <Header currentPage={currentPage} setCurrentPage={setCurrentPage} />
                <main className="container mx-auto p-4 md:p-6 lg:p-8 space-y-8">
                    {/* RouteManager component is always visible to show available routes */}
                    <RouteManager routes={routes} setRoutes={setRoutes} />

                    {/* Conditionally render BookingForm or MyBookings based on currentPage state */}
                    {currentPage === 'bookTickets' && (
                        <BookingForm routes={routes} />
                    )}
                    {currentPage === 'myBookings' && (
                        <MyBookings />
                    )}
                </main>
            </div>
        </FirebaseProvider>
    );
};

export default App;
