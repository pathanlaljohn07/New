import React, { useState, useEffect, createContext, useContext } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import {
    getFirestore,
    doc,
    addDoc,
    setDoc,
    deleteDoc,
    onSnapshot,
    collection,
    query,
    serverTimestamp, // Import serverTimestamp
    getDocs // Used to check if collection is empty
} from 'firebase/firestore';

// --- Firebase Context and Initialization ---
// Provides Firebase instances and auth state to all components
const FirebaseContext = createContext(null);

const FirebaseProvider = ({ children }) => {
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);

    useEffect(() => {
        try {
            // Retrieve Firebase config from global __firebase_config
            const firebaseConfig = typeof __firebase_config !== 'undefined'
                ? JSON.parse(__firebase_config)
                : {}; // Fallback for local testing

            if (!firebaseConfig || Object.keys(firebaseConfig).length === 0) {
                console.error("Firebase config is missing. Please ensure __firebase_config is set.");
                return;
            }

            const app = initializeApp(firebaseConfig);
            const firestore = getFirestore(app);
            const firebaseAuth = getAuth(app);

            setDb(firestore);
            setAuth(firebaseAuth);

            // Listen for authentication state changes
            const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
                if (user) {
                    // User is signed in, set their UID
                    setUserId(user.uid);
                } else {
                    // No user is signed in, attempt anonymous sign-in or use custom token
                    try {
                        const initialAuthToken = typeof __initial_auth_token !== 'undefined'
                            ? __initial_auth_token
                            : null;

                        if (initialAuthToken) {
                            // Sign in with custom token if available
                            await signInWithCustomToken(firebaseAuth, initialAuthToken);
                        } else {
                            // Otherwise, sign in anonymously
                            await signInAnonymously(firebaseAuth);
                        }
                    } catch (signInError) {
                        console.error("Error signing in:", signInError);
                        // Fallback to a random ID if anonymous sign-in also fails (highly unlikely)
                        setUserId(crypto.randomUUID());
                    }
                }
                // Mark authentication as ready
                setIsAuthReady(true);
            });

            // Cleanup the auth state listener when the component unmounts
            return () => unsubscribe();
        } catch (error) {
            console.error("Failed to initialize Firebase:", error);
        }
    }, []); // Empty dependency array ensures this runs only once on mount

    return (
        <FirebaseContext.Provider value={{ db, auth, userId, isAuthReady }}>
            {children}
        </FirebaseContext.Provider>
    );
};

// --- Helper Hook for Firebase Context ---
// Custom hook to easily access Firebase context values
const useFirebase = () => {
    const context = useContext(FirebaseContext);
    if (!context) {
        throw new Error('useFirebase must be used within a FirebaseProvider');
    }
    return context;
};

// --- Common UI Components ---
// A loading spinner component
const LoadingSpinner = () => (
    <div className="flex justify-center items-center h-full min-h-[100px]">
        <svg className="animate-spin h-8 w-8 text-blue-500" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span className="ml-2 text-gray-700">Loading...</span>
    </div>
);

// An error message display component
const ErrorMessage = ({ message }) => (
    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
        <strong className="font-bold">Error:</strong>
        <span className="block sm:inline ml-2">{message}</span>
    </div>
);

// --- Header Component ---
const Header = ({ currentPage, setCurrentPage }) => {
    const { userId } = useFirebase(); // Get userId from context

    return (
        <header className="bg-gradient-to-r from-blue-700 to-indigo-800 text-white p-4 shadow-lg rounded-b-xl">
            <div className="container mx-auto flex flex-col sm:flex-row justify-between items-center">
                <h1 className="text-3xl font-extrabold mb-2 sm:mb-0">Attendance Tracker</h1>
                <nav>
                    <ul className="flex flex-wrap justify-center space-x-4">
                        <li>
                            <button
                                onClick={() => setCurrentPage('markAttendance')}
                                className={`px-4 py-2 rounded-full transition duration-300 ease-in-out
                                    ${currentPage === 'markAttendance' ? 'bg-blue-800 shadow-md' : 'hover:bg-blue-600'}`}
                            >
                                Mark Attendance
                            </button>
                        </li>
                        <li>
                            <button
                                onClick={() => setCurrentPage('viewRecords')}
                                className={`px-4 py-2 rounded-full transition duration-300 ease-in-out
                                    ${currentPage === 'viewRecords' ? 'bg-blue-800 shadow-md' : 'hover:bg-blue-600'}`}
                            >
                                View Records
                            </button>
                        </li>
                    </ul>
                </nav>
                {userId && (
                    <div className="mt-2 sm:mt-0 text-sm bg-blue-600 px-3 py-1 rounded-full shadow-inner">
                        Your Session ID: <span className="font-mono">{userId.substring(0, 8)}...</span>
                    </div>
                )}
            </div>
        </header>
    );
};

// --- Student Management Component ---
const StudentManager = ({ students, setStudents }) => {
    const { db, isAuthReady } = useFirebase();
    const [newStudentName, setNewStudentName] = useState('');
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Get the base app ID from the global variable
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const studentsCollectionPath = `artifacts/${appId}/public/data/students`;

    // Fetch students on component mount and whenever Firebase is ready
    useEffect(() => {
        if (!isAuthReady || !db) return;

        setLoading(true);
        setError(null);

        const studentsCollectionRef = collection(db, studentsCollectionPath);
        const unsubscribe = onSnapshot(studentsCollectionRef, (snapshot) => {
            const fetchedStudents = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            // Sort students alphabetically by name
            fetchedStudents.sort((a, b) => a.name.localeCompare(b.name));
            setStudents(fetchedStudents);
            setLoading(false);
        }, (err) => {
            console.error("Error fetching students:", err);
            setError("Failed to load students. Please try again.");
            setLoading(false);
        });

        // Cleanup listener on component unmount
        return () => unsubscribe();
    }, [db, isAuthReady, appId, setStudents]);

    // Handle adding a new student
    const handleAddStudent = async () => {
        if (newStudentName.trim() === '') return;
        if (!db) return;

        try {
            const studentsCollectionRef = collection(db, studentsCollectionPath);
            await addDoc(studentsCollectionRef, {
                name: newStudentName.trim()
            });
            setNewStudentName(''); // Clear input after adding
            console.log("Student added successfully!");
        } catch (err) {
            console.error("Error adding student:", err);
            setError("Failed to add student.");
        }
    };

    // Handle deleting a student
    const handleDeleteStudent = async (studentId) => {
        if (!db) return;
        try {
            const studentDocRef = doc(db, studentsCollectionPath, studentId);
            await deleteDoc(studentDocRef);
            console.log("Student deleted successfully!");
        } catch (err) {
            console.error("Error deleting student:", err);
            setError("Failed to delete student.");
        }
    };

    // Add initial sample students if the collection is empty
    const addSampleStudents = async () => {
        if (!db) return;
        setLoading(true);
        try {
            const studentsCollectionRef = collection(db, studentsCollectionPath);
            const existingDocs = await getDocs(studentsCollectionRef);
            if (existingDocs.empty) {
                const sampleStudents = [
                    { name: "Alice Smith" },
                    { name: "Bob Johnson" },
                    { name: "Charlie Brown" },
                    { name: "Diana Prince" },
                    { name: "Eve Adams" }
                ];
                for (const student of sampleStudents) {
                    await addDoc(studentsCollectionRef, student);
                }
                console.log("Sample students added to Firestore.");
            } else {
                console.log("Students collection is not empty. Skipping sample data addition.");
            }
        } catch (err) {
            console.error("Error adding sample students:", err);
            setError("Failed to add sample students.");
        } finally {
            setLoading(false);
        }
    };

    if (loading) return <LoadingSpinner />;
    if (error) return <ErrorMessage message={error} />;

    return (
        <div className="bg-white p-6 rounded-lg shadow-lg mb-8">
            <h2 className="text-2xl font-bold text-gray-800 mb-4 border-b pb-2">Manage Students/Employees</h2>

            {/* Add New Student Form */}
            <div className="mb-6 flex flex-col sm:flex-row gap-2">
                <input
                    type="text"
                    value={newStudentName}
                    onChange={(e) => setNewStudentName(e.target.value)}
                    placeholder="Enter new name..."
                    className="flex-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                />
                <button
                    onClick={handleAddStudent}
                    className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md shadow-md transition duration-300"
                >
                    Add Name
                </button>
            </div>

            {/* List of Current Students */}
            {students.length === 0 ? (
                <div className="text-center text-gray-600 py-4">
                    <p className="mb-2">No names added yet.</p>
                    <button
                        onClick={addSampleStudents}
                        className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300"
                    >
                        Add Sample Names
                    </button>
                </div>
            ) : (
                <ul className="space-y-3 max-h-60 overflow-y-auto pr-2 custom-scrollbar">
                    {students.map((student) => (
                        <li key={student.id} className="flex justify-between items-center bg-gray-50 p-3 rounded-md border border-gray-200">
                            <span className="text-gray-800 font-medium">{student.name}</span>
                            <button
                                onClick={() => handleDeleteStudent(student.id)}
                                className="text-red-500 hover:text-red-700 px-2 py-1 rounded-md transition duration-300"
                            >
                                Delete
                            </button>
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
};

// --- Mark Attendance Component ---
const MarkAttendance = ({ students }) => {
    const { db, userId, isAuthReady } = useFirebase();
    const [selectedStudentId, setSelectedStudentId] = useState('');
    const [attendanceStatus, setAttendanceStatus] = useState('Present');
    const [attendanceDate, setAttendanceDate] = useState(new Date().toISOString().split('T')[0]); // YYYY-MM-DD
    const [message, setMessage] = useState('');
    const [loading, setLoading] = useState(false);

    // Get the base app ID from the global variable
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const attendanceCollectionPath = `artifacts/${appId}/users/${userId}/attendanceRecords`;

    // Reset message after a few seconds
    useEffect(() => {
        if (message) {
            const timer = setTimeout(() => setMessage(''), 3000);
            return () => clearTimeout(timer);
        }
    }, [message]);

    // Handle marking attendance
    const handleMarkAttendance = async () => {
        if (!db || !userId || !selectedStudentId || !attendanceDate) {
            setMessage("Please select a name and date.");
            return;
        }

        setLoading(true);
        setMessage('');

        // Find the selected student's name
        const selectedStudent = students.find(s => s.id === selectedStudentId);
        if (!selectedStudent) {
            setMessage("Selected name not found.");
            setLoading(false);
            return;
        }

        try {
            const attendanceRef = collection(db, attendanceCollectionPath);
            await addDoc(attendanceRef, {
                studentId: selectedStudent.id,
                studentName: selectedStudent.name,
                date: attendanceDate,
                status: attendanceStatus,
                timestamp: serverTimestamp() // Use serverTimestamp for precise and consistent time
            });
            setMessage(`Attendance marked for ${selectedStudent.name} as ${attendanceStatus} on ${attendanceDate}.`);
        } catch (err) {
            console.error("Error marking attendance:", err);
            setMessage("Failed to mark attendance. Please try again.");
        } finally {
            setLoading(false);
        }
    };

    if (!isAuthReady) return <LoadingSpinner />;
    if (students.length === 0) {
        return (
            <div className="bg-white p-6 rounded-lg shadow-lg my-8 text-center text-gray-700">
                <p className="mb-4">No names available to mark attendance for.</p>
                <p>Please add names using the "Manage Students/Employees" section above.</p>
            </div>
        );
    }

    return (
        <div className="bg-white p-6 rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold text-gray-800 mb-4 border-b pb-2">Mark Attendance</h2>

            {message && (
                <div className={`mb-4 p-3 rounded-md ${message.includes('Error') || message.includes('Failed') ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>
                    {message}
                </div>
            )}

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div>
                    <label htmlFor="student-select" className="block text-gray-700 text-sm font-bold mb-2">Select Name:</label>
                    <select
                        id="student-select"
                        className="shadow border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-400"
                        value={selectedStudentId}
                        onChange={(e) => setSelectedStudentId(e.target.value)}
                        disabled={loading}
                    >
                        <option value="">-- Select a name --</option>
                        {students.map((student) => (
                            <option key={student.id} value={student.id}>{student.name}</option>
                        ))}
                    </select>
                </div>

                <div>
                    <label htmlFor="attendance-date" className="block text-gray-700 text-sm font-bold mb-2">Date:</label>
                    <input
                        type="date"
                        id="attendance-date"
                        className="shadow border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-400"
                        value={attendanceDate}
                        onChange={(e) => setAttendanceDate(e.target.value)}
                        disabled={loading}
                    />
                </div>

                <div className="md:col-span-2">
                    <label className="block text-gray-700 text-sm font-bold mb-2">Status:</label>
                    <div className="flex space-x-4">
                        <label className="inline-flex items-center">
                            <input
                                type="radio"
                                className="form-radio text-blue-600"
                                name="attendanceStatus"
                                value="Present"
                                checked={attendanceStatus === 'Present'}
                                onChange={(e) => setAttendanceStatus(e.target.value)}
                                disabled={loading}
                            />
                            <span className="ml-2 text-gray-700">Present</span>
                        </label>
                        <label className="inline-flex items-center">
                            <input
                                type="radio"
                                className="form-radio text-red-600"
                                name="attendanceStatus"
                                value="Absent"
                                checked={attendanceStatus === 'Absent'}
                                onChange={(e) => setAttendanceStatus(e.target.value)}
                                disabled={loading}
                            />
                            <span className="ml-2 text-gray-700">Absent</span>
                        </label>
                        <label className="inline-flex items-center">
                            <input
                                type="radio"
                                className="form-radio text-yellow-600"
                                name="attendanceStatus"
                                value="Late"
                                checked={attendanceStatus === 'Late'}
                                onChange={(e) => setAttendanceStatus(e.target.value)}
                                disabled={loading}
                            />
                            <span className="ml-2 text-gray-700">Late</span>
                        </label>
                    </div>
                </div>
            </div>

            <button
                onClick={handleMarkAttendance}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md shadow-lg transition duration-300 transform hover:scale-105"
                disabled={loading}
            >
                {loading ? <LoadingSpinner /> : 'Mark Attendance'}
            </button>
        </div>
    );
};

// --- View Attendance Records Component ---
const ViewAttendanceRecords = ({ students }) => {
    const { db, userId, isAuthReady } = useFirebase();
    const [records, setRecords] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [filterDate, setFilterDate] = useState('');
    const [filterStudentId, setFilterStudentId] = useState('');

    // Get the base app ID from the global variable
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const attendanceCollectionPath = `artifacts/${appId}/users/${userId}/attendanceRecords`;

    useEffect(() => {
        if (!isAuthReady || !db || !userId) return;

        setLoading(true);
        setError(null);

        const recordsCollectionRef = collection(db, attendanceCollectionPath);
        // Firestore does not support orderBy() without indexes, so we'll fetch all and sort/filter client-side
        const q = query(recordsCollectionRef);

        const unsubscribe = onSnapshot(q, (snapshot) => {
            const fetchedRecords = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            // Sort records by timestamp (most recent first)
            fetchedRecords.sort((a, b) => (b.timestamp?.toMillis() || 0) - (a.timestamp?.toMillis() || 0));
            setRecords(fetchedRecords);
            setLoading(false);
        }, (err) => {
            console.error("Error fetching attendance records:", err);
            setError("Failed to load attendance records. Please try again.");
            setLoading(false);
        });

        // Cleanup listener on component unmount
        return () => unsubscribe();
    }, [db, userId, isAuthReady, appId]);

    // Apply filters to the records
    const filteredRecords = records.filter(record => {
        const matchesDate = filterDate ? record.date === filterDate : true;
        const matchesStudent = filterStudentId ? record.studentId === filterStudentId : true;
        return matchesDate && matchesStudent;
    });

    // Determine badge color for attendance status
    const getStatusBadge = (status) => {
        switch (status) {
            case 'Present': return 'bg-green-100 text-green-800';
            case 'Absent': return 'bg-red-100 text-red-800';
            case 'Late': return 'bg-yellow-100 text-yellow-800';
            default: return 'bg-gray-100 text-gray-800';
        }
    };

    if (loading) return <LoadingSpinner />;
    if (error) return <ErrorMessage message={error} />;

    return (
        <div className="bg-white p-6 rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold text-gray-800 mb-4 border-b pb-2">Attendance Records</h2>

            {/* Filters Section */}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6 p-4 bg-gray-50 rounded-md border border-gray-200">
                <div>
                    <label htmlFor="filter-date" className="block text-gray-700 text-sm font-bold mb-2">Filter by Date:</label>
                    <input
                        type="date"
                        id="filter-date"
                        className="shadow border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-400"
                        value={filterDate}
                        onChange={(e) => setFilterDate(e.target.value)}
                    />
                </div>
                <div>
                    <label htmlFor="filter-student" className="block text-gray-700 text-sm font-bold mb-2">Filter by Name:</label>
                    <select
                        id="filter-student"
                        className="shadow border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-400"
                        value={filterStudentId}
                        onChange={(e) => setFilterStudentId(e.target.value)}
                    >
                        <option value="">All Names</option>
                        {students.map((student) => (
                            <option key={student.id} value={student.id}>{student.name}</option>
                        ))}
                    </select>
                </div>
            </div>

            {filteredRecords.length === 0 ? (
                <div className="text-center text-gray-600 p-8">
                    {records.length === 0 ? "No attendance records found." : "No records match your filters."}
                </div>
            ) : (
                <div className="overflow-x-auto">
                    <table className="min-w-full bg-white rounded-lg shadow-md">
                        <thead className="bg-gray-100 border-b border-gray-200">
                            <tr>
                                <th className="py-3 px-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider rounded-tl-lg">Date</th>
                                <th className="py-3 px-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Name</th>
                                <th className="py-3 px-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Status</th>
                                <th className="py-3 px-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider rounded-tr-lg">Recorded At</th>
                            </tr>
                        </thead>
                        <tbody>
                            {filteredRecords.map((record) => (
                                <tr key={record.id} className="border-b border-gray-100 last:border-b-0 hover:bg-gray-50">
                                    <td className="py-3 px-4 text-gray-800 font-medium">{record.date}</td>
                                    <td className="py-3 px-4 text-gray-700">{record.studentName}</td>
                                    <td className="py-3 px-4">
                                        <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusBadge(record.status)}`}>
                                            {record.status}
                                        </span>
                                    </td>
                                    <td className="py-3 px-4 text-gray-500 text-sm">
                                        {record.timestamp ? new Date(record.timestamp.toMillis()).toLocaleString() : 'N/A'}
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}
        </div>
    );
};

// --- Main App Component ---
const App = () => {
    // State to manage the current page being displayed
    const [currentPage, setCurrentPage] = useState('markAttendance'); // 'markAttendance' or 'viewRecords'
    // State to store the list of students/employees
    const [students, setStudents] = useState([]);

    return (
        // FirebaseProvider wraps the entire application to provide Firebase context
        <FirebaseProvider>
            <div className="min-h-screen bg-gray-50 font-inter antialiased text-gray-800">
                <Header currentPage={currentPage} setCurrentPage={setCurrentPage} />
                <main className="container mx-auto p-4 md:p-6 lg:p-8 space-y-8">
                    {/* StudentManager component is always visible to manage the list of names */}
                    <StudentManager students={students} setStudents={setStudents} />

                    {/* Conditionally render MarkAttendance or ViewAttendanceRecords based on currentPage state */}
                    {currentPage === 'markAttendance' && (
                        <MarkAttendance students={students} />
                    )}
                    {currentPage === 'viewRecords' && (
                        <ViewAttendanceRecords students={students} />
                    )}
                </main>
            </div>
        </FirebaseProvider>
    );
};

export default App;
